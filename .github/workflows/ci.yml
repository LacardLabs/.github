name: Reusable CI

on:
  workflow_call:
    inputs:
      language:
        description: Primary language hint (python|node|rust|none)
        required: false
        type: string
        default: none
      python-version:
        description: Python version to install when detected
        required: false
        type: string
        default: ''
      node-version:
        description: Node.js version to install when detected
        required: false
        type: string
        default: ''
      run_tests:
        description: Run unit/integration tests when available
        required: false
        type: boolean
        default: true
      codeql:
        description: Enable CodeQL analysis when supported
        required: false
        type: boolean
        default: true
      sbom:
        description: Emit CycloneDX SBOM artifact
        required: false
        type: boolean
        default: false
  push:
    branches: [ main, master ]
    paths:
      - .github/workflows/ci.yml
  pull_request:
    paths:
      - .github/workflows/ci.yml

permissions:
  contents: read
  actions: read
  security-events: write

jobs:
  prepare:
    name: Detect stack
    runs-on: ubuntu-latest
    outputs:
      has_python: ${{ steps.detect.outputs.has_python }}
      has_node: ${{ steps.detect.outputs.has_node }}
      has_rust: ${{ steps.detect.outputs.has_rust }}
      codeql_languages: ${{ steps.detect.outputs.codeql_languages }}
      language_choice: ${{ steps.config.outputs.language }}
      run_tests_enabled: ${{ steps.config.outputs.run_tests }}
      codeql_enabled: ${{ steps.features.outputs.codeql }}
      sbom_enabled: ${{ steps.config.outputs.sbom }}
      python_version: ${{ steps.config.outputs.python_version }}
      node_version: ${{ steps.config.outputs.node_version }}
    steps:
      - uses: actions/checkout@v4
      - name: Resolve configuration inputs
        id: config
        env:
          INPUT_LANGUAGE: ${{ inputs.language }}
          INPUT_RUN_TESTS: ${{ inputs.run_tests }}
          INPUT_CODEQL: ${{ inputs.codeql }}
          INPUT_SBOM: ${{ inputs.sbom }}
          INPUT_PYTHON_VERSION: ${{ inputs['python-version'] }}
          INPUT_NODE_VERSION: ${{ inputs['node-version'] }}
        shell: bash
        run: |
          set -euo pipefail

          if [[ -n "${INPUT_LANGUAGE:-}" ]]; then
            language="$INPUT_LANGUAGE"
          elif [[ "${GITHUB_EVENT_NAME}" == "workflow_call" ]]; then
            language=$(jq -r '.inputs.language // ""' "$GITHUB_EVENT_PATH")
          else
            language=""
          fi

          if [[ -n "${INPUT_RUN_TESTS:-}" ]]; then
            run_tests="$INPUT_RUN_TESTS"
          elif [[ "${GITHUB_EVENT_NAME}" == "workflow_call" ]]; then
            run_tests=$(jq -r '.inputs.run_tests // ""' "$GITHUB_EVENT_PATH")
          else
            run_tests=""
          fi

          if [[ -n "${INPUT_CODEQL:-}" ]]; then
            codeql="$INPUT_CODEQL"
          elif [[ "${GITHUB_EVENT_NAME}" == "workflow_call" ]]; then
            codeql=$(jq -r '.inputs.codeql // ""' "$GITHUB_EVENT_PATH")
          else
            codeql=""
          fi

          if [[ -n "${INPUT_SBOM:-}" ]]; then
            sbom="$INPUT_SBOM"
          elif [[ "${GITHUB_EVENT_NAME}" == "workflow_call" ]]; then
            sbom=$(jq -r '.inputs.sbom // ""' "$GITHUB_EVENT_PATH")
          else
            sbom=""
          fi

          if [[ -n "${INPUT_PYTHON_VERSION:-}" ]]; then
            python_version="$INPUT_PYTHON_VERSION"
          elif [[ "${GITHUB_EVENT_NAME}" == "workflow_call" ]]; then
            python_version=$(jq -r '.inputs["python-version"] // ""' "$GITHUB_EVENT_PATH")
          else
            python_version=""
          fi

          if [[ -n "${INPUT_NODE_VERSION:-}" ]]; then
            node_version="$INPUT_NODE_VERSION"
          elif [[ "${GITHUB_EVENT_NAME}" == "workflow_call" ]]; then
            node_version=$(jq -r '.inputs["node-version"] // ""' "$GITHUB_EVENT_PATH")
          else
            node_version=""
          fi

          if [[ -z "$language" ]]; then
            language="none"
          fi

          if [[ -z "$run_tests" ]]; then
            run_tests="true"
          fi

          if [[ -z "$codeql" ]]; then
            codeql="true"
          fi

          if [[ -z "$sbom" ]]; then
            sbom="false"
          fi

          if [[ -z "$python_version" ]]; then
            python_version="3.12"
          fi

          if [[ -z "$node_version" ]]; then
            node_version="lts/*"
          fi

          printf 'language=%s\n' "$language" >> "$GITHUB_OUTPUT"
          printf 'run_tests=%s\n' "$run_tests" >> "$GITHUB_OUTPUT"
          printf 'codeql=%s\n' "$codeql" >> "$GITHUB_OUTPUT"
          printf 'sbom=%s\n' "$sbom" >> "$GITHUB_OUTPUT"
          printf 'python_version=%s\n' "$python_version" >> "$GITHUB_OUTPUT"
          printf 'node_version=%s\n' "$node_version" >> "$GITHUB_OUTPUT"
      - id: detect
        name: Detect languages
        env:
          LANGUAGE_INPUT: ${{ steps.config.outputs.language }}
        shell: bash
        run: |
          set -euo pipefail

          python=0
          node=0
          rust=0

          if [[ -f requirements.txt || -f pyproject.toml || -f poetry.lock ]]; then
            python=1
          fi
          if [[ -f package.json || -f pnpm-lock.yaml || -f yarn.lock ]]; then
            node=1
          fi
          if [[ -f Cargo.toml ]]; then
            rust=1
          fi

          case "$LANGUAGE_INPUT" in
            python) python=1 ;;
            node) node=1 ;;
            rust) rust=1 ;;
            none|"" ) : ;;
            *) echo "Unsupported language hint: $LANGUAGE_INPUT" >&2 ; exit 1 ;;
          esac

          langs=()
          if [[ $python -eq 1 ]]; then langs+=(python); fi
          if [[ $node -eq 1 ]]; then langs+=(javascript); fi
          # CodeQL treats Rust analysis as C/C++, so surface `cpp` only when
          # Rust is the sole detected language. Mixed stacks skip the entry to
          # avoid requesting unsupported analyses.
          if [[ $rust -eq 1 && ${#langs[@]} -eq 0 ]]; then langs+=(cpp); fi
          if [[ ${#langs[@]} -eq 0 ]]; then langs+=(python); fi

          {
            echo "has_python=$python"
            echo "has_node=$node"
            echo "has_rust=$rust"
            (IFS=","; echo "codeql_languages=${langs[*]}")
          } >> "$GITHUB_OUTPUT"

      - name: Finalize feature toggles
        id: features
        shell: bash
        env:
          CODEQL_INPUT: ${{ steps.config.outputs.codeql }}
          CODEQL_LANGS: ${{ steps.detect.outputs.codeql_languages }}
          HAS_PYTHON: ${{ steps.detect.outputs.has_python }}
          HAS_NODE: ${{ steps.detect.outputs.has_node }}
          HAS_RUST: ${{ steps.detect.outputs.has_rust }}
        run: |
          set -euo pipefail

          codeql="$CODEQL_INPUT"
          if [[ "$codeql" == "true" ]]; then
            if [[ "$CODEQL_LANGS" == "cpp" ]]; then
              echo "CodeQL disabled: rust-only repository detected"
              codeql="false"
            elif [[ "$HAS_PYTHON" != "1" && "$HAS_NODE" != "1" && "$HAS_RUST" != "1" ]]; then
              echo "CodeQL disabled: no supported source languages detected"
              codeql="false"
            fi
          fi

          printf 'codeql=%s\n' "$codeql" >> "$GITHUB_OUTPUT"

  lint_test:
    name: Lint and test
    needs: prepare
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Materialize inventory
        if: ${{ hashFiles('Makefile') != '' && hashFiles('tools/materialize.py') != '' && hashFiles('tools/validate.py') != '' }}
        shell: bash
        run: make materialize

      - name: Validate inventory
        if: ${{ hashFiles('Makefile') != '' && hashFiles('tools/materialize.py') != '' && hashFiles('tools/validate.py') != '' }}
        shell: bash
        run: make validate

      - name: Set up Python
        id: python_setup
        if: ${{ needs.prepare.outputs.has_python == '1' }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ needs.prepare.outputs.python_version }}

      - name: Install Python dependencies
        if: ${{ steps.python_setup.conclusion == 'success' }}
        shell: bash
        run: |
          set -euo pipefail
          python -m pip install -U pip
          if [[ -f requirements.txt ]]; then
            python -m pip install -r requirements.txt
          elif [[ -f pyproject.toml ]]; then
            python -m pip install '.[test]' || python -m pip install .
          fi
          if ! command -v pytest >/dev/null 2>&1; then
            python -m pip install pytest
          fi

      - name: Run pytest
        if: ${{ steps.python_setup.conclusion == 'success' && needs.prepare.outputs.run_tests_enabled == 'true' }}
        shell: bash
        run: |
          set +e
          pytest -q
          status=$?
          set -e
          if [[ $status -eq 5 ]]; then
            echo "Pytest collected no tests; marking as success."
            exit 0
          fi
          exit $status

      - name: Set up Node
        id: node_setup
        if: ${{ needs.prepare.outputs.has_node == '1' }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ needs.prepare.outputs.node_version }}
          cache: npm

      - name: Install Node dependencies
        if: ${{ steps.node_setup.conclusion == 'success' }}
        shell: bash
        run: |
          set -euo pipefail
          if [[ -f package-lock.json ]]; then
            npm ci
          else
            npm install
          fi

      - name: Node lint
        if: ${{ steps.node_setup.conclusion == 'success' }}
        shell: bash
        run: npm run --if-present lint

      - name: Node test
        if: ${{ steps.node_setup.conclusion == 'success' && needs.prepare.outputs.run_tests_enabled == 'true' }}
        shell: bash
        run: npm run --if-present test

      - name: Set up Rust
        id: rust_setup
        if: ${{ needs.prepare.outputs.has_rust == '1' }}
        uses: LacardLabs/.github/actions/setup-rust@839ec6c968fb7109fe00e958c65f58c76fefc461
        with:
          toolchain: stable
          components: clippy,rustfmt

      - name: Cache cargo artifacts
        if: ${{ steps.rust_setup.conclusion == 'success' }}
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-

      - name: Rust fmt
        if: ${{ steps.rust_setup.conclusion == 'success' }}
        shell: bash
        run: cargo fmt --all --check

      - name: Rust tests
        if: ${{ steps.rust_setup.conclusion == 'success' && needs.prepare.outputs.run_tests_enabled == 'true' }}
        shell: bash
        run: cargo test --all --locked

      - name: Make fallback
        if: ${{ needs.prepare.outputs.run_tests_enabled == 'true' && !(needs.prepare.outputs.has_python == '1' || needs.prepare.outputs.has_node == '1' || needs.prepare.outputs.has_rust == '1') }}
        shell: bash
        run: |
          set -euo pipefail

          if [[ ! -f Makefile ]]; then
            echo "No make targets detected; skipping"
            exit 0
          fi

          run_target() {
            local target="$1"
            set +e
            local output
            output=$(make "$target" 2>&1)
            local status=$?
            set -e
            printf '%s\n' "$output"

            if [[ $status -eq 0 ]]; then
              return 0
            fi

            if [[ $status -eq 2 && "$output" == *"No rule to make target"* ]]; then
              return 2
            fi

            return $status
          }

          run_target test
          status=$?
          if [[ $status -eq 0 ]]; then
            exit 0
          fi

          if [[ $status -ne 2 ]]; then
            echo "make test failed with status $status"
            exit $status
          fi

          run_target ci
          status=$?
          if [[ $status -eq 0 ]]; then
            exit 0
          fi

          if [[ $status -ne 2 ]]; then
            echo "make ci failed with status $status"
            exit $status
          fi

          echo "Makefile present but no test/ci target; skipping"

  codeql:
    name: CodeQL
    if: ${{ needs.prepare.outputs.codeql_enabled == 'true' }}
    needs: prepare
    runs-on: ubuntu-latest
    permissions:
      contents: read
      actions: read
      security-events: write
    steps:
      - uses: actions/checkout@v4
      - uses: github/codeql-action/init@v3
        with:
          languages: ${{ needs.prepare.outputs.codeql_languages }}
      - uses: github/codeql-action/autobuild@v3
        continue-on-error: true
      - uses: github/codeql-action/analyze@v3

  sbom:
    name: SBOM
    if: ${{ needs.prepare.outputs.sbom_enabled == 'true' }}
    needs: prepare
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: anchore/sbom-action/download-syft@v0
      - name: Generate SBOM (CycloneDX JSON)
        shell: bash
        run: syft packages dir:. -o cyclonedx-json=sbom.json
      - name: Upload SBOM artifact
        if: ${{ github.event_name == 'workflow_call' || startsWith(github.ref, 'refs/tags/') }}
        uses: actions/upload-artifact@v4
        with:
          name: sbom
          path: sbom.json
