name: Reusable CI

on:
  pull_request:
  push:
    branches: [ main, master ]
  workflow_call:
    inputs:
      node-version:
        required: false
        type: string
        default: 'lts/*'
      python-version:
        required: false
        type: string
        default: '3.x'

jobs:
  build-test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      # Python (conditional)
      - name: Set up Python
        if: ${{ hashFiles('requirements.txt') != '' || hashFiles('pyproject.toml') != '' }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ inputs.python-version }}
      - name: Python deps (requirements.txt)
        if: ${{ hashFiles('requirements.txt') != '' }}
        run: python -m pip install -r requirements.txt
      - name: Python deps (pyproject)
        if: ${{ hashFiles('pyproject.toml') != '' && hashFiles('requirements.txt') == '' }}
        run: python -m pip install build pytest
      - name: Python tests
        if: ${{ hashFiles('tests/**') != '' }}
        run: pytest -q || echo "No pytest configured; skipping."

      # Node (conditional)
      - name: Set up Node
        if: ${{ hashFiles('package.json') != '' }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ inputs['node-version'] }}
      - name: Node install
        if: ${{ hashFiles('package.json') != '' }}
        run: npm ci || npm install
      - name: Node tests
        if: ${{ hashFiles('package.json') != '' }}
        run: npm test --silent || echo "No tests configured; skipping."

      # Makefile fallback
      - name: Makefile
        if: ${{ hashFiles('Makefile') != '' }}
        run: |
          set -o pipefail

          run_target() {
            local target="$1"
            MAKE_OUTPUT=$(make "$target" 2>&1)
            local status=$?
            printf '%s\n' "$MAKE_OUTPUT"
            return $status
          }

          if run_target test; then
            exit 0
          fi

          test_status=$?
          test_output="$MAKE_OUTPUT"

          if echo "$test_output" | grep -qiE "no rule to make target"; then
            if run_target ci; then
              exit 0
            fi

            ci_status=$?
            ci_output="$MAKE_OUTPUT"

            if echo "$ci_output" | grep -qiE "no rule to make target"; then
              echo "No make test/ci target; skipping."
              exit 0
            fi

            exit $ci_status
          fi

          exit $test_status
